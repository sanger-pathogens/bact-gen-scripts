#!/software/bin/perl

=head1 NAME

lfind.pl 

=head1 SYNOPSIS

lfind -lane 3031_1

=head1 DESCRIPTION

Given a lane id, this script returns the location on disk of the relevant fastq files

=head1 CONTACT

nds@sanger.ac.uk

=head1 METHODS

=cut

use strict;
use warnings;
no warnings 'uninitialized';

use Cwd;
use lib "/software/pathogen/internal/pathdev/vr-codebase/modules"; #Change accordingly once we have a stable checkout
use lib "/software/vertres/lib/all";
use Getopt::Long;
use VRTrack::VRTrack;
use VRTrack::Lane;
use VRTrack::Sample;
use VRTrack::Individual;
use VertRes::Utils::VRTrackFactory;

my ($type, $id, $qc, $filetype, $symlink, $output, $help);

GetOptions(
   't|type=s'   	=> \$type,
   'id=s'		=> \$id,
   'qc=s'		=> \$qc,
   'f|filetype=s' 	=> \$filetype,
   'symlink' 		=> \$symlink,
   'o|output=s'		=> \$output,
   'h|help'		=> \$help,
    );

($type && $id && $id ne '' && ($type eq 'study' || $type eq 'lane') && (!$qc || ($qc && ($qc eq 'passed' || $qc eq 'failed' || $qc eq 'pending'))) && (!$filetype || ($filetype && ($filetype eq 'bam' || $filetype eq 'fastq'))) ) or die <<USAGE;

Usage: $0
     -t|type  		<study|lane>
     -id 		<study id|study name|lane name>
     -f|filetype  	<fastq|bam>
     -qc      		<passed|failed|pending>
     -symlink 		<create a symlink to the data>
     -o|output 		<output dir for sym links>
     -h|help  		<print this message>

Given a study or lane, this script will output the path (on pathogen disk) to the data associated with the specified study or lane. Using the option -qc (pass|fail|pending) will limit the results to data of 
the specified qc status. Using the option -filetype (fastq or bam) will return the path to the files of this type for the given data. Using the option -symlink will create a symlink to the queried data in the current 
directory, alternativley an output directory can be specified in which the symlinks will be created.

USAGE

my %databases =  ('viruses'     => 'pathogen_virus_track',
                  'prokaryotes' => 'pathogen_prok_track',   
                  'eukaryotes'  => 'pathogen_euk_track',
                  'helminths'   => 'pathogen_helminth_track'
                  );

# Connection details for the read only account and hierarchy template hard-coded here
# but should eventually be put into the pathogen profile
my %connection_details =  (host => "web-mii-shap", 
                           port => 3303, 
                           user => "pathpipe_ro",
                           password => "" );

my $hierarchy_template = "genus:species-subspecies:TRACKING:projectssid:sample:technology:library:lane";

my $pathtrack;
my $found = 0; #assume nothing found
my $min = 0;
my $max = 1;
my $destination;

if( $filetype eq 'fastq' ){
   $min = 0;
   $max = 3
}
elsif( $filetype eq 'bam' ){
  $min = 4;
  $max = 5;
}

if( $symlink )
{
     $destination = defined( $output) ? $output : getcwd;
     if( ! -e $destination)
     {
         print "The directory $destination does not exist, please specify a valid destination output directory for the symlinks";
         exit;
     }
}

foreach (keys %databases){

   $connection_details{database} = $databases{$_};
   $pathtrack = VRTrack::VRTrack->new({%connection_details});

   #check pathtrack object

   my $category = $_;
   my $root = "/lustre/scratch103/pathogen/pathpipe/$category/seq-pipelines/";
   my @lanes = ();

   if( $type eq 'lane' ){
       my $lane = VRTrack::Lane->new_by_name($pathtrack, $id);
       if($lane){
          push(@lanes,$lane);
       }
       if( @lanes == 0 ){ # lane not found so get the multiplex data, need a better way to extract multiplex data
           foreach(1..24){
               $lane = VRTrack::Lane->new_by_name($pathtrack, $id."#$_");
               if($lane){
	          push(@lanes,$lane);
               }
           }   
      }
   }
   elsif( $type eq 'sample' ){
     #get the lanes for the sample
     my $sample_obj = VRTrack::Individual->new_by_name($pathtrack, $id);

     if( $sample_obj ){
         my @sample_lanes = @{get_lanes( $id )};
         push( @lanes, @sample_lanes );
     }
   }
   elsif( $type eq 'study' ){
      #get the lanes for the study
      my $study_obj = $id =~ m/(\d)/ ? $pathtrack->get_project_by_ssid( $id ):$pathtrack->get_project_by_name( $id );
      if( $study_obj ){
          my $samples = $study_obj->samples();
          foreach my $sample ( @$samples ){
                my @sample_lanes = @{get_lanes( $sample )};
                push( @lanes, @sample_lanes );
          }
      }
   }
  
   if( $filetype ){
        foreach(@lanes){
            my $l= $_;
            if( !$qc || ( $qc && $qc eq $l->qc_status() ) ){
               my $lane_path = $pathtrack->hierarchy_path_of_lane($l,$hierarchy_template);
               my $files_ref = $l->files();
               my @files = @$files_ref;
               foreach(@files)
               {
                  my $f = $_;
                  my $type = $f->type();
                  if( $type >= $min && $type < $max ){
                     my $path = $f->hierarchy_name();
                     my $full_path = "$root/$lane_path/$path";
                     if (-e "$full_path")
                     {
                        $found = 1;
                        print "$full_path \n";
                        if( $symlink )
                        {
                            my $cmd = qq[ ln -s $full_path $destination ];
                            qx( $cmd );
                        }
                     }
                  }
               }
            }
         }
   }
   else{
     foreach(@lanes){
        my $l= $_;
        if( !$qc || ( $qc && $qc eq $l->qc_status() ) ){
           my $path = $pathtrack->hierarchy_path_of_lane($l,$hierarchy_template);
           my $full_path = "$root/$path";
           if (-e "$full_path")
           {
              $found = 1;
              print "$full_path \n";
              if( $symlink )
              {
		my $cmd = qq[ ln -s $full_path $destination ];
                qx( $cmd );
              }
           }
        }
     }
   }

   if( $found ) #no need to look in the next database if relevant data has been found
   {
      exit;
   }
}

unless ($found) {

    print "Could not find lanes or files for input data \n";

}

sub get_lanes
{
   my $sample = shift;
   my @sample_lanes;
   my $libraries = $sample->libraries();
   foreach my $library ( @$libraries ){
        my @lib_lanes = @{ $library->lanes() };
        push(@sample_lanes, @lib_lanes);
   }
   return \@sample_lanes;
}
