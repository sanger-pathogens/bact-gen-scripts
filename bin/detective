#!/usr/local/bin/perl

# $Id: detective.pl,v 1.12 2003/07/22 21:28:28 mpop Exp $

#  Copyright @ 2002, 2003, The Institute for Genomic Research (TIGR).  All
#  rights reserved.

use strict;
#use DBI;
use TIGR::Foundation;

my $REVISION = '$Revision: 1.12 $ ';
our $VERSION = '1.0';
our $VERSION_STRING = "$VERSION (Build $REVISION)";

my $REPEAT_RANGE = 30;  # minimum overlap with the repeat region.

my $__HELP_INFO =
q~NAME
detective - generates inputs for BAMBOO

SYNOPSIS
detective -D database  [ -S server ] [ -U username ]
	 { { -a asm_file } | { -C contig_file }| {-m mate_file} | 
	   { -g group_inp } 
         } [-r repeat_file] [-o out_file] [xml files]
         [ -debug level ] [ -h ] [ -V ]

SUMMARY

PARAMETERS

OPTIONS

EXIT CODES
   0   Successful completion
   1   Failed completion


EXAMPLES

USAGE

SEE ALSO

~;

# initiate / define a TIGR Foundation object in the global scope
my $base = new TIGR::Foundation;
if (! defined $base){
    print STDERR "the sky is falling, run away!\n";
    exit(1);
}

$base->setVersionInfo($VERSION_STRING);
$base->setHelpInfo($__HELP_INFO);

# set up application defaults
my $SERVER          = "SYBTIGR";
my $USER            = "access";
my $PASSWD          = "access";
my $DBTYPE          = "Sybase";
my $dbproc;

my $db;
my $matefile;
my $asmfile;
my $grpinp;
my $outFile = "evidence.xml";
my $contigFile;    # contig file

# global variables
my $minSeqId = 1;  # for numbering sequences
my %seqids;        # correspondence between seq_names and ids
my %seqnames;
my %seq_range;     # range of sequences
my %contigs;       # correspondence between contigs and lengths
my %seqcontig;     # correspondence between sequences and contigs
my %contigseq;     # correspondence between contigs and sequences
my $matesDone = 0; # keep track of whether we found the mates
my %forw;          # forward end of insert
my %rev;           # reverse end of insert
my %insertlib;     # inserts for each library
my %seenlib;       # library for each insert
my %libraries;     # library parameter
my $repeatFile;    # file containing repeats to be screened against
my %repeats;       # list of repeats for each contig
my %libMap;        # mapping between 4 letter codes and actual libraries

# parse command line parameters
my $err = $base->TIGR_GetOptions("D=s"  => \$db,
  				 "S=s"  => \$SERVER,
  				 "U=s"  => \$USER,
				 "P=s"  => \$PASSWD,
  				 "m=s"  => \$matefile,
  				 "a=s"  => \$asmfile,
  				 "g=s"  => \$grpinp,
				 "o=s"  => \$outFile,
				 "C=s"  => \$contigFile,
				 "r:s"  => \$repeatFile);

if ($err == 0){
    $base->bail("Command parsing failed.  See -h option");
}

if (! $base->isCreatableFile($outFile) && ! $base->isWritableFile($outFile)){
    $base->bail("Output file \"$outFile\" appears to not be writeable");
}

if (! defined $matefile && 
    (defined $asmfile || defined $contigFile)) {
    if (!defined $db){
	$base->bail("You must provide either a mate file or a database!");
    }
    $dbproc = DBI->connect("dbi:$DBTYPE:server=$SERVER", $USER, $PASSWD);
    if (! defined $dbproc){
	$base->bail("Connection to server \"$SERVER\" failed");
    }

    $dbproc->do("use $db") || 
	$base->bail("Failed to open database \"$db\"");
}

if (! defined $db && ! defined $matefile){
    $base->bail("Either -D or -m must be defined.  See -h option");
}

if (defined $asmfile){
    open(IN, $asmfile) || $base->bail("Cannot open \"$asmfile\" : $!");
    
    parseAsmFile(\*IN);

    close(IN);
}

if (defined $contigFile){
    open(IN, $contigFile) || 
	$base->bail("Cannot open \"$contigFile\" : $!");
    
    parseContigFile(\*IN);

    close(IN);
}

if (defined $repeatFile){
    if ($repeatFile ne ""){
	open(IN, $repeatFile) ||
	    $base->bail("Cannot open \"$repeatFile\" : $!");
	
	parseRepeatFile(\*IN);
	close(IN);
    } else {
	while (my ($c, $s) = each %contigs){
	    get_repeat_info($c);
	}
    }
}
# In case repeats were passed, we should now have them all in %repeats

# Now it's time to clean up all those sequences that hit repeats
if (defined $repeatFile){
    while (my ($c, $s) = each %contigs){
	if (! exists $repeats{$c}){
	    next; # no repeats
	}
	my @repeats = @{$repeats{$c}};

	if ($#repeats == -1){
	    next; # no repeats to be dealt with
	}
	
# first build a list of sequence starts and ends
	my @seqs = split(' ', $contigseq{$c});
	for (my $s = 0; $s <= $#seqs; $s++){
	    my ($start, $send, $a, $b) = split(' ', $seq_range{$seqs[$s]});
	    my $keep = 1;
	    for (my $r = 0; $r <= $#repeats; $r++){
		my ($rstart, $rend) = split(' ', $repeats[$r]);
		$rstart += $REPEAT_RANGE;
		$rend += $REPEAT_RANGE;

		if ($start <= $rend && $send >= $rstart){
		    $keep = 0;
		    next;
		} # discard sequence because of repeat
	    }
	    if (! $keep){
		# removing the seqids record will get rid of the sequence
		# as far as building inserts is concerned
		delete $seqids{$seqnames{$seqs[$s]}};
	    }
	}
	
    }
}


# since some files contain the mating relationship we only do this step
# for those who don't.

my %seeninsert;
# here we generate the insert hashes: %insertlib, %libraries, %forw, %rev
if (! $matesDone){
    if (defined $db){ # do the TIGR thing
	# this is where the get_mates routines will go in
	
	while (my ($snm, $sid) = each %seqids){
	    if (length($snm) > 10){
		next; # get rid of closure seqs
	    }
	    my $insert = substr($snm, 0, 7);
	    my $library = substr($snm, 0, 4);
	    if (! exists $seeninsert{$insert}){
		$insertlib{$library} .= "$insert ";
		$seeninsert{$insert} = 1;
	    }
	    $libraries{$library} = "";
	    if (substr($snm, 7, 1) eq "F" ||
		substr($snm, 8, 1) eq "F"){
		if (! exists $forw{$insert} ||
		    $snm gt $forw{$insert}){
		    $forw{$insert} = $snm;
		}
	    } elsif (substr($snm, 7, 1) eq "R" ||
		     substr($snm, 8, 1) eq "R"){
		if (! exists $rev{$insert} ||
		    $snm gt $rev{$insert}) {
		    $rev{$insert} = $snm;
		}
	    }
	}
	while (my $lib = each %insertlib){
	    get_lib_info($lib);
	}
    } elsif (defined $matefile) { # the mate file contains either mates
                                  # or regular expressions defining them
	open(MATE, $matefile) || $base->bail("Cannot open \"$matefile\": $!\n");
	my @libregexp;
	my @libids;
	my @pairregexp;
	my $insname = 1;
	while (<MATE>){
	    chomp;
	    if (/^library/){
		my @recs = split('\t', $_);
		if ($#recs < 3|| $#recs > 4){
		    print STDERR "Only ", $#recs + 1, " fields\n";
		    $base->logError("Improperly formated line $. in \"$matefile\".\nMaybe you didn't use TABs to separate fields\n", 1);
		    next;
		}

		if ($#recs == 4){
		    $libregexp[++$#libregexp] = $recs[4];
		    $libids[++$#libids] = $recs[1];
		}
		$libraries{$recs[1]} = "$recs[2] $recs[3]";
		next;
	    } # if library
	    if (/^pair/){
		my @recs = split('\t', $_);
		if ($#recs != 2){
		    $base->logError("Improperly formated line $. in \"$matefile\".\nMaybe you didn't use TABs to separate fields\n");
		    next;
		}
		@pairregexp[++$#pairregexp] = "$recs[1] $recs[2]";
		next;
	    }
	    if (/^\#/) { # comment
		next;
	    }
	    if (/^\s*$/) { # empty line
		next;
	    }

	    # now we just deal with the pair lines
	    my @recs = split('\t', $_);
	    if ($#recs < 1 || $#recs > 2){
		$base->logError("Improperly formated line $. in \"$matefile\".\nMaybe you didn't use TABs to separate fields\n");
		next;
	    }

# make sure we've seen these sequences
	    if (! defined $seqids{$recs[0]}){
		$base->logError("No contig contains sequence $recs[0] at line $. in \"$matefile\"");
		next;
	    }
	    if (! defined $seqids{$recs[1]} ){
		$base->logError("No contig contains sequence $recs[1] at line $. in \"$matefile\"");
		next;
	    }

	    if (defined $recs[2]){
		$insertlib{$recs[2]} .= "$insname ";
		$seenlib{$insname} = $recs[2];
	    }

	    $forw{$insname} = $recs[0];
	    $rev{$insname} = $recs[1];

	    $insname++;
	} # while <MATE>
	close(MATE);

	# now we have to go through all the sequences and assign them to
	# inserts
	while (my ($nm, $sid) = each %seqids){
	    for (my $r = 0; $r <= $#pairregexp; $r++){
		my ($freg, $revreg) = split(' ', $pairregexp[$r]);
		$base->logLocal("trying $freg and $revreg on $nm\n", 2);
		if ($nm =~ /$freg/){
		    $base->logLocal("got forw $1\n", 2);
		    if (! exists $forw{$1}){
			$forw{$1} = $nm;
		    }
		    last;
		}
		if ($nm =~ /$revreg/){
		    $base->logLocal("got rev $1\n", 2);
		    if (! exists $rev{$1}){
			$rev{$1} = $nm;
		    }
		    last;
		}
	    } # for each pairreg
	} # while each %seqids

	while (my ($ins, $nm) = each %forw) {
	    if (! exists $seenlib{$ins}){
		my $found = 0;
		
		for (my $l = 0; $l <= $#libregexp; $l++){
		    $base->logLocal("Trying $libregexp[$l] on $nm\n", 2);
		    if ($nm =~ /$libregexp[$l]/){
			$base->logLocal("found $libids[$l]\n", 2);
			$insertlib{$libids[$l]} .= "$ins ";
			$seenlib{$ins} = $libids[$l];
			$found = 1;
			last;
		    }
		}
		if ($found == 0){
		    $base->logError("Cannot find library for \"$nm\"");
		    next;
		}
	    }
	}
    } # elsif
} # if ! matesDone

# print out contig relationships

# now inserts should be defined we just pick those that connect distinct 
# contigs

my $date =`date`; chomp $date;
my $project = "";
if (defined $db) {
    $project = $db;
} else {
    $project = "MyProject";
}

my $xmlHead = qq~<?xml version="1.0" ?>

<EVIDENCE ID="project_1" 
          DATE="$date" 
          PROJECT="$project" 
          PARAMETERS=""
>

~;

my $xmlTail = "</EVIDENCE>\n";

open(OUT, ">$outFile") || $base->bail("Cannot open \"$outFile\": $!\n");
print OUT $xmlHead;

while (my ($lib, $range) = each %libraries){
    my $libid = $lib;
    if (exists $libMap{$lib}){
	$libid = $libMap{$lib};
    }
    my ($min, $max) = split(' ', $range);
    my @inserts = split(' ', $insertlib{$lib});
      my $ngood = 0;

# here we make sure not to print out a library that contains no complete
# inserts, at least not in the contigs we are processing
      for (my $ins = 0; $ins <= $#inserts; $ins++){
  	my $in = $inserts[$ins];
  	if (exists $forw{$in} && exists $rev{$in}){# && 
#  	    $seqcontig{$seqids{$forw{$in}}} ne
#  	    $seqcontig{$seqids{$rev{$in}}}){
  	    $ngood++;
  	}
      }
      if($ngood == 0) {
  	next;
      }
    print OUT "  <LIBRARY ID=\"lib_$libid\" NAME=\"$lib\" MIN=\"$min\" MAX=\"$max\">\n";
    for (my $ins = 0; $ins <= $#inserts; $ins++){
	my $in = $inserts[$ins];
	if (exists $forw{$in} && exists $rev{$in}){# && 
#	    $seqcontig{$seqids{$forw{$in}}} ne
#	    $seqcontig{$seqids{$rev{$in}}}){
	    # we'll use this insert as evidence
	    my $insid = $minSeqId++;
	    print OUT "    <INSERT ID=\"ins_$insid\" NAME=\"$in\">\n";
	    print OUT "      <SEQUENCE ID=\"seq_$seqids{$forw{$in}}\" NAME=\"$forw{$in}\"/>\n";
	    print OUT "      <SEQUENCE ID=\"seq_$seqids{$rev{$in}}\" NAME=\"$rev{$in}\"/>\n";
	    print OUT "    </INSERT>\n";
	}
    }
    print OUT "  </LIBRARY>\n";
}

while (my ($ctg, $len) = each %contigs){
    print OUT "  <CONTIG ID=\"contig_$ctg\" NAME=\"$ctg\" LEN=\"$len\">\n";
    my @seqs = split(' ', $contigseq{$ctg});
    for (my $seq = 0; $seq <= $#seqs; $seq++){
	if (! exists $seqids{$seqnames{$seqs[$seq]}}){
#	    print STDERR "Cannot find id for $seqs[$seq]\n";
	    $base->logError("Cannot find $seqnames{$seqs[$seq]}", 1);
	    next;
	}
	my ($al, $ar, $sl, $sr) = split(' ', $seq_range{$seqs[$seq]});
	my $ori = ($sl < $sr) ? "BE" : "EB";
	print OUT "    <SEQUENCE ID=\"seq_$seqs[$seq]\" ORI=\"$ori\" ASM_LEND=\"$al\" ASM_REND=\"$ar\"/>\n";
    }
    print OUT "  </CONTIG>\n";
}

print OUT $xmlTail;
close(OUT);

#I'm done, wshew

exit(0);
###############################################################



# PARSING FUNCTIONS
#
# Each function parses either a file or a database table and
# fills in the following hashes:
# 
# %contigs - contig_ids and sizes
# %seqids - seq_name to seq_id
# %seq_range - seq_id to seq_range and asm_range as blank delimited string
# %seqcontig - seq_id to contig
sub parseAsmFile {
    my $IN = shift;

    my $ctg; 
    my $len;
    my $sname;
    my $alend;
    my $arend;
    my $slend;
    my $srend;
    my $sid;
    while (<$IN>){
	if (/^sequence\s+(\w+)/){
	    $len = length($1);
	    next;
	}
	if (/^asmbl_id\s+(\w+)/){
	    $ctg = $1;
	    $contigs{$ctg} = $len;  # here we assume that length 
                                    # was already computed
	    next;
	}
	if (/^seq_name\s+(\S+)/){
	    $sname = $1;
	    $sid = $minSeqId++;
	    $seqcontig{$sid} = $ctg;
	    $contigseq{$ctg} .= "$sid ";
	    $seqids{$sname} = $sid;
	    $seqnames{$sid} = $sname;
	    next;
	}
	if (/^asm_lend\s+(\d+)/){
	    $alend = $1;
	    next;
	}
	if (/^asm_rend\s+(\d+)/){
	    $arend = $1;
	    next;
	}
	if (/^seq_lend\s+(\d+)/){
	    $slend = $1;
	    next;
	}
	if (/^seq_rend\s+(\d+)/){
	    $srend = $1;
	    next;
	}
	if (/^offset/){
	    $seq_range{$sid} = "$alend $arend $slend $srend";
	    next;
	}
    }
}


# parser for ace files
sub parseContigFile {
    my $IN = shift;

    my $ctg; 
    my $len;
    my $sname;
    my $alend;
    my $arend;
    my $slend;
    my $srend;
    my $sid;
    my $incontig = 0;
    while (<$IN>){
	if (/^\#\#(\S+) \d+ (\d+)/){
	    $ctg = $1;
	    $contigs{$ctg} = $2;
	    $incontig = 1;
	    next;
	}

	if (/^\#(\S+)\(\d+\) .*\{(\d+) (\d+)\} <(\d+) (\d+)>/){
	    $incontig = 0;
	    $sname = $1;
	    $sid = $minSeqId++;
	    $seqcontig{$sid} = $ctg;
	    $contigseq{$ctg} .= "$sid ";
#	    print STDERR "adding $sname to $ctg\n";
	    $seqids{$sname} = $sid;
	    $seqnames{$sid} = $sname;
	    $alend = $4;
	    $arend = $5;
	    $slend = $2;
	    $srend = $3;
	    $seq_range{$sid} = "$alend $arend $slend $srend";
	    next;
	}

	if ($incontig){
	    # here I try to get rid of dashes when computing contig sizes
	    my $ind = -1;
	    while (($ind = index($_ ,"-", $ind + 1)) != -1){
		$contigs{$ctg}--;
	    }
	}
    }
}

# parser for repeat files
# updates the %repeats table
sub parseRepeatFile {
    my $IN = shift;

    while (<$IN>){
	if (/^\#/){
	    next; # skip comments
	}
	chomp;
	my @vals = split("\t", $_);
	push(@{$repeats{$vals[0]}}, "$vals[2] $vals[3]");
    }
}

# TIGR DB INTERACTION

# get_lib_info retrieves information from the database for a particular
# lib_id and writes it into the %libraries array.
# assumes $dbproc is already defined
sub get_lib_info
{
    my $lib = shift;

    my $query = 
qq~
select min_clone_len, max_clone_len, cat#
from track..library
where lib_id = "$lib"
  and db = "$db"
~;

    my $rh = $dbproc->prepare($query) || 
	$base->bail("Cannot prepare query: \"$query\"");

    $rh->execute() || $base->bail("query \"$query\" failed");

    while (my $lineref = $rh->fetchrow_arrayref){
	$libraries{$lib} = "$$lineref[0] $$lineref[1]";
	$libMap{$lib} = $$lineref[2];
    }

    $rh->finish;
}

# get_repeat_info retrieves all the repeat regions for a particular assembly
# updates the %repeats table
sub get_repeat_info
{
    my $contig = shift;

    my $query = 
qq~
select end5, end3
from asm_feature
where asmbl_id = $contig
  and feat_type = "AUTO_RPT"
~;

    my $rh = $dbproc->prepare($query) ||
	$base->bail("Cannot prepare query: \"$query\"");

    $rh->execute() || $base->bail("Query: \"$query\" failed");

    while (my $lineref = $rh->fetchrow_arrayref){
	push(@{$repeats{$contig}}, join(' ', @{$lineref}));
    }
    
    $rh->finish;
}
