#!/usr/local/bin/perl

# $Id: goBambus.pl,v 1.13 2004/02/06 21:32:07 mpop Exp $

#  Copyright @ 2002, 2003, The Institute for Genomic Research (TIGR).  All
#  rights reserved.

use strict;

# Bambus programs
my $BAMBUS_BASE = "~/scripts";
BEGIN{
 $BAMBUS_BASE = "~/scripts";
}

my $DETECTIVE  = $BAMBUS_BASE . "/bin/detective";
my $PREGROMMIT = $BAMBUS_BASE . "/bin/xml2grommit";
my $GROMMIT    = $BAMBUS_BASE . "/bin/grommit";
my $DISPLAY    = $BAMBUS_BASE . "/bin/printScaff";
my $CATXML     = $BAMBUS_BASE . "/bin/catXML";

$ENV{PERLLIB} .= ":$BAMBUS_BASE/lib";
use lib "$BAMBUS_BASE/lib";

# Other useful programs
my $MAKE       = "/usr/bin/make";


use TIGR::Foundation;


my $base = new TIGR::Foundation;

if (! defined $base){
    die("Cannot create foundation object\n");
}

my $VERSION = '2.33 $Revision: 1.13 $ ';

$base->setVersionInfo($VERSION);
$base->setDebugLevel(1);

my $asmfile;
my $contigfile;
my $matesfile;
my $conffile;
my $prefix = "tmp";
my @xmls;
my $db;
my $server;
my $user;
my $passwd;
my $repeatfile;
my $makefile;   # where we generate more xmls
my $startstep = 0;
my $endstep = 1000;

my $HELP_INFO = q~
    goBambus [options]

    Configuration Options:
       -C <conf_file>   - read configuration option from <conf_file>

    Input Options:
       -a <asm_file>    - use TIGR Assembler output
       -c <contig_file> - use GDE formatted assembly
       -x <xml_file>    - use additional XML input (this option can be used
                          multiple times)
       -mx <makefile>   - use a makefile to generate a set of xml files

    Mate Information:
       -m <mates_file>  - mate and library information is listed in <mates_file>
       -D <db>          - get mate and library information from database <db>
       -S <server>      - specify database server
       -U <user>        - database user name
       -P <passwd>      - database password

    Repeat Screening:
       -r <repeat_file> - screen for repeats in <repeat_file>
       -r               - use repeat information from the database

    Output Options:
       -o <output_prefix> - prefix all output files with <output_prefix>

    Miscellaneous Options:
       -start <step>    - start processing at step <step>
       -end <step>      - end processing at step <step>
       -h, -help        - print this help message
       -V               - obtain program version
    ~;

$base->setHelpInfo($HELP_INFO);

my $err = $base->TIGR_GetOptions(
				 "a=s"   => \$asmfile,
				 "c=s"   => \$contigfile,
				 "m=s"   => \$matesfile,
				 "C=s"   => \$conffile,
				 "o=s"   => \$prefix,
				 "x=s"   => \@xmls,
				 "mx=s"  => \$makefile,
				 "D=s"   => \$db,
				 "S=s"   => \$server,
				 "U=s"   => \$user,
				 "P=s"   => \$passwd,
				 "r:s"   => \$repeatfile,
				 "start=i" => \$startstep,
				 "end=i"   => \$endstep
				 );


print STDERR "Parsing links out of input file\n";

if (defined $repeatfile && ! defined $asmfile && ! defined $contigfile){
    $base->bail("Option -r requires -a or -c");
}

if ((defined $asmfile || defined $contigfile) && 
    ! defined $matesfile && ! defined $db){
    $base->bail("You must specify a mate file or a database");
}

if (defined $matesfile && defined $db){
    $base->bail("You can specify only one of -D and -m");
}

if ((defined $server || defined $user || defined $passwd) && ! defined $db){
    $base->bail("Options -S, -U, and -P require option -D");
}

my $lgfl = $base->getLogFile();
my $lglv = $base->getDebugLevel();

my $debugParms = "-appendlog 1 -logfile $lgfl";
my $grommitDebug = "--append --logfile $lgfl";
if ($lglv != 0){
    $debugParms .= " -debug $lglv";
    $grommitDebug .= " --debug $lglv";
}

my $parms = "";
if (defined $asmfile) {
    $parms = "-a $asmfile";
} elsif (defined $contigfile) {
    $parms = "-C $contigfile";
} else {
    $base->bail("You must use either -a or -c");
}

$parms .= " -o $prefix.detective.xml";

if (defined $db) {
    $parms .= " -D $db";
}

if (defined $server) {
    $parms .= " -S $server";
}

if (defined $user) {
    $parms .= " -U $user";
}

if (defined $passwd) {
    $parms .= " -P $passwd";
}

if (defined $matesfile){
    $parms .= " -m $matesfile";
}

if (defined $repeatfile) {
    $parms .= " -r $repeatfile";
}

my $cmd;

my $step = 100;

if ($startstep <= 100 && $endstep > 100){
    print "Step $step: running detective\n";
    $base->logLocal("Step $step: running detective\n", 1);
    if (defined $asmfile || defined $contigfile){
	$cmd = $DETECTIVE . " $parms" . " $debugParms";
	$base->logLocal("running $cmd\n", 1);
	if (system($cmd)) {
	    $base->bail("The detective ($cmd) failed");
	}
	push(@xmls, "$prefix.detective.xml");
    }
}

$step += 100;
if ($startstep <= 200 && $endstep > 200){
    print "Step $step: making the xmls\n";
    $base->logLocal("Step $step: making xmls\n", 1);
    if (defined $makefile){
	print STDERR "MAKEing more XMLs\n";
	
	open(MAKE, $makefile) ||
	    $base->bail("Cannot open $makefile: $!");
	
	# here we figure out which XML files are generated by the
	# makefile so we can use them later
	while (<MAKE>){
	    if (/^(\S+\.xml):/){
		push(@xmls, $1);
	    }
	}
	
	close(MAKE);
	
	$cmd = $MAKE . " -f $makefile";
	$base->logLocal("running $cmd\n", 1);
	if (system($cmd)) {
	    $base->bail("Make ($cmd) failed");
	}
    }

    print STDERR "Combining XML files\n";
    
    my $catparm = join(" ", @xmls);
    
    $cmd = $CATXML . " -o $prefix.evidence.xml $catparm";
    $base->logLocal("running $cmd\n", 1);
    
    if (system($cmd)){
	$base->bail("$cmd failed");
    }
}

$step += 100;
if ($startstep <= 300 && $endstep > 300){
    print STDERR "Step $step: Preparing contig links\n";
    $base->logLocal("Step $step: preparing contig links\n", 1);
    
    $parms = "-i $prefix.evidence.xml -o $prefix.inp -l $prefix.lib -oc $prefix.grommit.conf";
    
    if (defined $conffile){
	$parms .= " -c $conffile -dc $prefix.default.conf";
    }
    
    $cmd = $PREGROMMIT . " $parms" . " $debugParms";
    $base->logLocal("running $cmd\n", 1);

    if (system($cmd)){
	$base->bail("Pre-grommit($cmd) script failed");
    }
}

$step += 100;
if ($startstep <= 400 && $endstep > 400){
    print STDERR "Step $step: Running scaffolder\n";
    $base->logLocal("Step $step: Running scaffolder\n", 1);

    $parms = "-i $prefix.inp -o $prefix.out.xml -C $prefix.grommit.conf";
    
    $cmd = $GROMMIT . " $parms" . " $grommitDebug";
    $base->logLocal("running $cmd\n", 1);
    
    if (system($cmd)){
	$base->bail("Grommit($cmd) script failed");
    }
}

$step += 100;
if ($startstep <= 500 && $endstep > 500){
    print STDERR "Step $step: Creating outputs\n";
    $base->logLocal("Step $step: Creating outputs\n", 1);
    
    $parms = "-e $prefix.evidence.xml -s $prefix.out.xml -o $prefix -l $prefix.lib";
    
    $parms .= " -dot -detail -sum -oo";
    
    $cmd = $DISPLAY . " $parms" . " $debugParms";
    $base->logLocal("running $cmd\n", 1);
    
    if (system($cmd)){
	$base->bail("Post-grommit($cmd) script failed");
    }
}

exit(0);
